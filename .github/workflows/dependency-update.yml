name: Dependency Updates

on:
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday at midnight UTC
  workflow_dispatch:  # Allow manual trigger

jobs:
  update-dependencies:
    name: Update dependencies
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Update dependencies
      run: |
        # Update uv.lock with latest compatible versions
        uv lock --upgrade

    - name: Install updated dependencies
      run: |
        uv sync --all-extras

    - name: Run tests with updated dependencies
      run: |
        uv run pytest --cov-fail-under=95

    - name: Security check
      run: |
        uv run safety check
        uv run bandit -r src/file_editor

    - name: Check if there are changes
      id: changes
      run: |
        if git diff --quiet uv.lock; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies"
        title: "chore: automated dependency updates"
        body: |
          ## Automated Dependency Updates

          This PR contains automated updates to project dependencies.

          ### Changes
          - Updated `uv.lock` with latest compatible versions
          - All tests pass with updated dependencies
          - Security scans completed successfully

          ### Review checklist
          - [ ] Check for any breaking changes in updated packages
          - [ ] Verify all tests still pass
          - [ ] Review security scan results
          - [ ] Check for any deprecated features we might be using

          **Note**: This PR was automatically generated by GitHub Actions.
        branch: automated-dependency-updates
        delete-branch: true

  security-audit:
    name: Security audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run comprehensive security audit
      run: |
        # Check for known vulnerabilities
        uv run safety check --json --output safety-report.json || true

        # Security linting
        uv run bandit -r src/file_editor -f json -o bandit-report.json || true

        # Check for hardcoded secrets (basic patterns)
        echo "Checking for potential secrets..."
        if grep -r -i "password\|secret\|key\|token" src/ --include="*.py" | grep -v "# noqa"; then
          echo "‚ö†Ô∏è  Found potential secrets in code"
        else
          echo "‚úÖ No obvious secrets found"
        fi

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

    - name: Create security issue if vulnerabilities found
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const title = 'üîí Security vulnerabilities detected';
          const body = `## Security Audit Results

          Automated security scanning has detected potential issues.

          ### Action Required
          - Review the uploaded security reports
          - Update vulnerable dependencies
          - Fix any security issues in the code

          ### Reports
          Check the workflow artifacts for detailed reports:
          - \`safety-report.json\` - Dependency vulnerabilities
          - \`bandit-report.json\` - Code security issues

          **Created by**: Automated security audit
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}`;

          // Check if issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security', 'automated'],
            state: 'open'
          });

          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automated', 'high-priority']
            });
          }
