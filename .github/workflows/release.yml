name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  test:
    name: Run full test suite
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run core tests for release
      run: |
        uv run pytest tests/test_basic_functionality.py --cov-report=xml

    - name: Security scan
      run: |
        uv run bandit -r src/file_editor
        uv run safety check

  build:
    name: Build and publish
    runs-on: ubuntu-latest
    needs: test
    environment: release
    permissions:
      id-token: write  # For trusted publishing to PyPI

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.version }}"/' pyproject.toml

    - name: Build package
      run: |
        uv build

    - name: Check package
      run: |
        uv run twine check dist/*

    - name: Test package installation
      run: |
        python -m pip install dist/*.whl
        python -c "import file_editor; print('Package installed successfully')"

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Test installation from TestPyPI
      run: |
        python -m pip uninstall -y file-editor
        sleep 10  # Wait for package to be available
        python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ file-editor==${{ steps.version.outputs.version }}
        python -c "import file_editor; print('TestPyPI installation successful')"

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in this Release

          ### Features
          - Memory-efficient partial file editing
          - Agent-friendly API for AI applications
          - Support for Markdown, CSV, and text file formats
          - Production-grade safety mechanisms

          ### Installation

          ```bash
          pip install file-editor==${{ steps.version.outputs.version }}
          ```

          Or with uv:

          ```bash
          uv add file-editor==${{ steps.version.outputs.version }}
          ```

          See the [README](https://github.com/rwxproject/file-editor#readme) for full documentation.

          **Full Changelog**: https://github.com/rwxproject/file-editor/compare/v${{ steps.version.outputs.version }}...HEAD
        draft: false
        prerelease: false

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: file-editor-${{ steps.version.outputs.version }}-dist.zip
        asset_content_type: application/zip

  notify:
    name: Post-release notifications
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Verify PyPI publication
      run: |
        sleep 60  # Wait for PyPI to update
        pip index versions file-editor | grep "${{ steps.version.outputs.version }}" || exit 1

    - name: Create success notification
      run: |
        echo "âœ… file-editor v${{ steps.version.outputs.version }} successfully released!"
        echo "ðŸ“¦ Available on PyPI: https://pypi.org/project/file-editor/${{ steps.version.outputs.version }}/"
        echo "ðŸ“‹ GitHub Release: https://github.com/rwxproject/file-editor/releases/tag/v${{ steps.version.outputs.version }}"
